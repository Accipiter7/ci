#!bin/bash
#
# HANA-CI Kernel Build Script || For Continous Integration
#
# Copyright 2019, Ahmad Thoriq Najahi "Najahiii" <najahiii@outlook.co.id>
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2020, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2020, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

# CI Script Revision = 20200508

# Build Information
#
# Kernel Name
# 0 = CAF (Stock Based Kernel) || 1 = Kizuna (Clarity Next-Gen) || 2 Fusion (Co-operate with @alanndz)
#
# Kernel Scheduler
# 0 = HMP || 1 = EAS
#
# Kernel State
# 0 = BETA || 1 = Stable
#
# Android Version
# 0 = 9.0 || 1 = 10.0
#
# Kernel Codename
# 0 = Mido || 1 = Lavender
#
# Kernel Compiler
# 0 = Docker Clang || 1 = Proton Clang 11 (Untested)
#
# CI Service
# 0 = Drone CI || 1 = Circle CI || 2 = Semaphore CI
#
# Lavender Cam Patch
# 0 = Old cam || 1 = New cam
#
# Declare Kernel Details
KERNEL_NAME=2
KERNEL_SCHED=1
KERNEL_STATE=1
KERNEL_AND_VER=1
KERNEL_CODENAME=1
KERNEL_COMPILER=1
KERNEL_CI_SERVICE=2

# Make sure if new cam declare only for lavender
if [ "$KERNEL_CODENAME" == "1" ];
	then
		KERNEL_NEW_CAM=1
fi

# Environment init
function env_init() {

# Set ARCH
export ARCH=arm64
export SUBARCH=arm64

# Set Timezone
export TZ=Asia/Jakarta

# Set CI Service
if [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		KERNEL_BOT="Drone-CI"
elif [ "$KERNEL_CI_SERVICE" == "1" ];
	then
		KERNEL_BOT="Circle-CI"
elif [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		KERNEL_BOT="Semaphore-CI"
fi
}

# Mido init
function mido_init() {

# Create Temporary Folder
mkdir TEMP

# Clone source for specific kernel name
if [ "$KERNEL_NAME" == "0" ];
	then
		# Clone kernel repositories earlier
		git clone --depth=1 -b lineage-17.1-misc https://github.com/Nicklas373/kernel_xiaomi_msm8953-4.9 kernel

		# Cloning AnyKernel Repository
		git clone --depth=1 -b caf/mido-4.9 https://github.com/Nicklas373/AnyKernel3

		# Define Kernel Specific Environment
		KERNEL_SCHED="EAS"
		KERNEL_BRANCH="lineage-17.1-misc"
		KERNEL_REV="r1"
		KERNEL_REL="CAF"
elif [ "$KERNEL_NAME" == "1" ];
	then
		# Clone kernel repositories earlier
		git clone --depth=1 -b staging/kizuna https://github.com/Nicklas373/kernel_xiaomi_msm8953-4.9 kernel

		# Cloning AnyKernel Repository
		git clone --depth=1 -b caf/mido-kizuna-4.9 https://github.com/Nicklas373/AnyKernel3

		# Define Kernel Specific Environment
		KERNEL_SCHED="EAS"
		KERNEL_BRANCH="staging/kizuna"
		KERNEL_REV="r1"
		KERNEL_REL="Kizuna"
fi

# Define CI Specific Environment
export KBUILD_BUILD_USER=Kasumi
export KBUILD_BUILD_HOST=${KERNEL_BOT}

# Define Global Environment for Mido
IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
KERNEL="$(pwd)/kernel"
KERNEL_TEMP="$(pwd)/TEMP"
CODENAME="mido"
KERNEL_CODE="Mido"
TELEGRAM_DEVICE="Xiaomi Redmi Note 4x"

# Define Kernel Release State
if [ "$KERNEL_STATE" == "1" ];
	then
		KERNEL_RELEASE="Stable"
elif [ "$KERNEL_STATE" == "0" ];
	then
		KERNEL_RELEASE="BETA"
fi

# Define Kernel Telegram Channel Aliases
if [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		TELEGRAM_BOT_ID=${tg_bot_id}
		if [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${tg_channel_id}
		elif [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${tg_group_id}
		fi
elif [ "$KERNEL_CI_SERVICE" == "1" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		TELEGRAM_BOT_ID=${telegram_bot_id}
		if [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_official_id}
		elif [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_dev_id}
		fi
fi
}

# Lavender init
function lave_init() {

# Cloning Kernel Repository
if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		git clone --depth=1 -b fusion-rework-2 https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 kernel
fi

# Cloning AnyKernel Repository
git clone --depth=1 -b fusion https://github.com/alanndz/AnyKernel3

# Create Temporary Folder
mkdir TEMP

# Define Kernel Scheduler
KERNEL_SCHED="EAS"
KERNEL_BRANCH="fusion-rework-2"

# Define CI Specific Environment
export KBUILD_BUILD_USER=alanndz-nicklas373
export KBUILD_BUILD_HOST=fusion_lavender-Dev

# Define Lavender Specific Environment && Telegram Channel Release
if [ "$KERNEL_CI_SERVICE" == "1" ];
	then
		KERNEL="$(pwd)"
		IMAGE="$(pwd)/out/arch/arm64/boot/Image.gz-dtb"
		TELEGRAM_BOT_ID=${telegram_bot_id}
		if [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_dev_id}
		elif [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_aln_id}
		fi
elif [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		KERNEL="$(pwd)/kernel"
		IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
		TELEGRAM_BOT_ID=${tg_bot_id}
		if [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${tg_group_id}
		elif [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${tg_aln_id}
		fi
elif [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		KERNEL="$(pwd)/kernel"
		IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
		TELEGRAM_BOT_ID=${telegram_bot_id}
		if [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_dev_id}
		elif [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_aln_id}
		fi
fi
KERNEL_TEMP="$(pwd)/TEMP"
CODENAME="lavender"
KERNEL_CODE="Lavender"
TELEGRAM_DEVICE="Xiaomi Redmi Note 7"
KERNEL_REV="r5"
KERNEL_REL="Fusion"

# Declare Kernel Release State
if [ "$KERNEL_STATE" == "1" ];
	then
		KERNEL_RELEASE="Stable"
		FUSION_CODENAME="Empyrean_Psalms"
		KERNEL_VERSION="r5"
		KVERSION="${FUSION_CODENAME}-${KERNEL_VERSION}"
		ZIP_NAME="${KERNEL_NAME}-${KVERSION}-${CODENAME}-$(TZ=Asia/Jakarta date "+%H%M-%d%m%Y").zip"
elif [ "$KERNEL_STATE" == "0" ];
	then
		KERNEL_RELEASE="BETA"
		FUSION_CODENAME="Empyrean_Psalms"
		KERNEL_VERSION="r5"
		KVERSION="${FUSION_CODENAME}-$(git log --pretty=format:'%h' -1)-$(TZ=Asia/Jakarta date "+%H%M")"
		ZIP_NAME="${KERNEL_NAME}-${FUSION_CODENAME}-${CODENAME}-$(git log --pretty=format:'%h' -1)-$(TZ=Asia/Jakarta date "+%H%M").zip"
fi
}

# Additional init environment
function add_init() {

# Declare global additional environment
KERNEL_SUFFIX="Kernel"
KERNEL_DATE="$(TZ=Asia/Jakarta date +%Y%m%d-%H%M)"

# Declare Android Version
if [ "$KERNEL_AND_VER" == "0" ];
	then
		KERNEL_ANDROID_VER="9"
		KERNEL_TAG="P"
elif [ "$KERNEL_AND_VER" == "1" ];
	then
		KERNEL_ANDROID_VER="10"
		KERNEL_TAG="Q"
fi

# Declare Telegram File Environment
TELEGRAM_FILENAME="${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"
export TELEGRAM_SUCCESS="CAACAgUAAx0CSp9MtQABAepjXq6Y3170L09A2CJZRN8gNFvbl1MAAmgAA-DTQRkRDMJTDT98URkE"
export TELEGRAM_FAIL="CAACAgUAAx0CSp9MtQABAeprXq6ZZGVszX6u48DHZu0saobZ2kwAAmkAA-DTQRniCWJZ9E5eWRkE"
}

# Cloning Clang
function clang_init() {

if [ "$KERNEL_COMPILER" == "0" ];
	then
		# Tell to CI if we're used docker clang
		echo "Using Docker Clang"

		# Clang environment
		export CLANG_PATH=/root/proton-11/bin
		export PATH=${CLANG_PATH}:${PATH}
		export LD_LIBRARY_PATH="/root/proton-11/bin/../lib:$PATH"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		# Tell to CI if we're used external clang
		echo "Using External Clang"

		# Clone External Clang
		git clone --depth=1 -b proton-clang-11 https://github.com/HANA-CI-Build-Project/proton-clang p-clang

		# External clang environment
		export CLANG_PATH=$(pwd)/p-clang/bin
		export PATH=${CLANG_PATH}:${PATH}
		export LD_LIBRARY_PATH="$(pwd)/p-clang/bin/../lib:$PATH"
fi
}

# Declare Telegram Bot Aliases
function telegram_init() {
TELEGRAM_KERNEL_VER=$(cat ${KERNEL}/out/.config | grep Linux/arm64 | cut -d " " -f3)
TELEGRAM_UTS_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep UTS_VERSION | cut -d '"' -f2)
TELEGRAM_COMPILER_NAME=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_BY | cut -d '"' -f2)
TELEGRAM_COMPILER_HOST=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_HOST | cut -d '"' -f2)
TELEGRAM_TOOLCHAIN_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILER | cut -d '"' -f2)
}

# Telegram Bot Service || Compiling Notification
function bot_template() {
curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage -d chat_id=${TELEGRAM_GROUP_ID} -d "parse_mode=HTML" -d text="$(
	for POST in "${@}";
		do
			echo "${POST}"
		done
	)"
}

# Telegram Bot Service || Compiling Message
function bot_first_compile() {
	bot_template	"<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} Kernel build Start!</b>" \
			"" \
			"<b>Build Status :</b><code> ${KERNEL_RELEASE} </code>" \
			"<b>Device :</b><code> ${TELEGRAM_DEVICE} </code>" \
			"<b>Android Version :</b><code> ${KERNEL_ANDROID_VER} </code>" \
			"" \
			"<b>Kernel Scheduler :</b><code> ${KERNEL_SCHED} </code>" \
			"<b>Kernel Branch :</b><code> ${KERNEL_BRANCH} </code>" \
			"<b>Latest commit :</b><code> $(git --no-pager log --pretty=format:'"%h - %s (%an)"' -1) </code>"
}

# Telegram bot message || complete compile notification
function bot_complete_compile() {
	telegram_init
	bot_template	"<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
			"" \
			"<b>New ${KERNEL_REL} Kernel Build Is Available!</b>" \
			"" \
			"<b>Build Status :</b><code> ${KERNEL_RELEASE} </code>" \
			"<b>Device :</b><code> ${TELEGRAM_DEVICE} </code>" \
			"<b>Android Version :</b><code> ${KERNEL_ANDROID_VER} </code>" \
   			"<b>Filename :</b><code> ${TELEGRAM_FILENAME}</code>" \
			"" \
			"<b>Kernel Scheduler :</b><code> ${KERNEL_SCHED} </code>" \
			"<b>Kernel Version:</b><code> Linux ${TELEGRAM_KERNEL_VER}</code>" \
			"<b>Kernel Host:</b><code> ${TELEGRAM_COMPILER_NAME}@${TELEGRAM_COMPILER_HOST}</code>" \
			"<b>Kernel Toolchain :</b><code> ${TELEGRAM_TOOLCHAIN_VER}</code>" \
			"<b>UTS Version :</b><code> ${TELEGRAM_UTS_VER}</code>" \
			"" \
			"<b>Latest commit :</b><code> $(git --no-pager log --pretty=format:'"%h - %s (%an)"' -1)</code>" \
			"<b>Compile Time :</b><code> $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)</code>" \
			"" \
			"<b>                         HANA-CI Build Project | 2016-2020                            </b>"
}

function bot_lave_compile() {
		telegram_init
		bot_template	"<b>---- ${KERNEL_REL} New Kernel ----</b>" \
				"<b>Device:</b> ${CODENAME} or ${TELEGRAM_DEVICE}" \
				"<b>Name:</b> <code>${KERNEL_NAME}-${KVERSION}</code>" \
				"<b>Kernel Version:</b> <code>${TELEGRAM_KERNEL_VER}</code>" \
				"<b>Type:</b> <code>${KERNEL_SCHED}</code>" \
				"<b>Commit:</b> <code>$(git log --pretty=format:'%h : %s' -1)</code>" \
				"<b>Started on:</b> <code>$(hostname)</code>" \
				"<b>Compiler:</b> <code>${TELEGRAM_TOOLCHAIN_VER}</code>" \
				"<b>Started at</b> <code>${KERNEL_DATE}</code>"
}

# Telegram bot message || success notification
function bot_build_success() {
	bot_template	"<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} Kernel build Success!</b>"
}

# Telegram bot message || failed notification
function bot_build_failed() {
	bot_template	"<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} Kernel build Failed!</b>" \
			"" \
			"<b>Compile Time :</b><code> $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)</code>"
}

# Telegram sticker message
function sendStick() {
	curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_ID/sendSticker -d sticker="${1}" -d chat_id=$TELEGRAM_GROUP_ID &>/dev/null
}

# Compile Mido Begin
function compile_mido() {
	cd ${KERNEL}
	bot_first_compile
	cd ..
	START=$(TZ=Asia/Jakarta date +"%s")
	make -s -C ${KERNEL} ${CODENAME}_defconfig O=out
if [ "$KERNEL_COMPILER" == "0" ];
	then
		CLANG_PATH="/root/proton-11/bin/:${PATH}"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		CLANG_PATH="$(pwd)/p-clang/bin/:${PATH}"
fi
	PATH="$CLANG_PATH" \
	make -C ${KERNEL} -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
				CC=clang \
				CLANG_TRIPLE=aarch64-linux-gnu- \
				CROSS_COMPILE=aarch64-linux-gnu- \
				CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	if ! [ -a $IMAGE ];
		then
			echo "kernel not found"
			END=$(TZ=Asia/Jakarta date +"%s")
			DIFF=$(($END - $START))
			cd ${KERNEL}
			bot_build_failed
			cd ..
			sendStick "${TELEGRAM_FAIL}"
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			exit 1
	fi
	END=$(TZ=Asia/Jakarta date +"%s")
	DIFF=$(($END - $START))
	cd ${KERNEL}
	bot_build_success
	cd ..
	sendStick "${TELEGRAM_SUCCESS}"
	cp ${IMAGE} AnyKernel3
	anykernel
	kernel_upload
}

# Compile Lavender Begin
function compile_lave() {
if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		cd ..
fi
	START=$(TZ=Asia/Jakarta date +"%s")
	make ${CODENAME}_defconfig O=out
if [ "$KERNEL_COMPILER" == "0" ];
	then
		CLANG_PATH="/root/proton-11/bin/:${PATH}"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		CLANG_PATH="$(pwd)/p-clang/bin/:${PATH}"
fi
if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		alt_compile_1
elif [ "$KERNEL_CI_SERVICE" == "1" ];
	then
		alt_compile_2
fi
	if ! [ -a $IMAGE ];
		then
			echo "kernel not found"
			END=$(TZ=Asia/Jakarta date +"%s")
			DIFF=$(($END - $START))
			bot_build_failed
			sendStick "${TELEGRAM_FAIL}"
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			exit 1
	fi
	END=$(TZ=Asia/Jakarta date +"%s")
	DIFF=$(($END - $START))
	cd ${KERNEL}
	bot_lave_compile
	bot_build_success
	sendStick "${TELEGRAM_SUCCESS}"
	if [ "$KERNEL_CI" == "0" ];
		then
			echo ""
	else
	     cd ${KERNEL}
	fi
        cp ${IMAGE} AnyKernel3
	anykernel
	kernel_upload
	if [ "$KERNEL_NEW_CAM" == "0" ];
		then
			echo "Build Done :3"
	elif [ "$KERNEL_NEW_CAM" == "1" ];
		then
			if [ "$NEW_PATCH_STATS" == "0" ];
				then
					init_patch
			elif [ "$NEW_PATCH_STATS" == "1" ];
				then
					echo "Build Done :3"
			fi
	fi
}

# Alternate compile for lavender
function alt_compile_1() {
PATH="$CLANG_PATH"
make -C ${KERNEL} -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
					CC=clang \
					CLANG_TRIPLE=aarch64-linux-gnu- \
					CROSS_COMPILE=aarch64-linux-gnu- \
					CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}

function alt_compile_2() {
PATH="$CLANG_PATH"
make -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
					CC=clang \
					CLANG_TRIPLE=aarch64-linux-gnu- \
					CROSS_COMPILE=aarch64-linux-gnu- \
					CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}

# Camera patch
function init_patch() {

# Download patch
cd ${KERNEL}
wget https://raw.githubusercontent.com/alanndz/build_kernel/fusion/patches/02.patch

# Declare HEAD commit before patch
RESET_COMMIT=$(git --no-pager log --pretty=format:'%h')

# Declare specified kernel name for pie patch
KVERSION="${FUSION_CODENAME}-New_CAM-$(git log --pretty=format:'%h' -1)-$(TZ=Asia/Jakarta date "+%H%M")"
ZIP_NAME="${KERNEL_NAME}-${FUSION_CODENAME}-${CODENAME}-New_CAM-$(git log --pretty=format:'%h' -1)-$(TZ=Asia/Jakarta date "+%H%M").zip"

# Apply pie camera patch
git am 02.patch

# Tell if new cam patch already executed
NEW_PATCH_STATS="1"

# Begin init compiling process
cd ..
compile_lave
}

# AnyKernel
function anykernel() {
	cd AnyKernel3
	make -j4
	if [ "$KERNEL_CODENAME" == "1" ];
		then
			mv *.zip ${KERNEL_TEMP}/$ZIP_NAME
	elif [ "$KERNEL_CODENAME" == "0" ];
		then
			if  [ "$KERNEL_NAME" == "0" ];
				then
					mv CAF-Kernel-${KERNEL_CODE}-signed.zip ${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
			elif [ "$KERNEL_NAME" == "1" ];
				then
					mv Kizuna-Kernel-4.9-${KERNEL_CODE}-signed.zip ${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
			fi
	fi
}

# Upload Kernel
function kernel_upload() {
	if [ "$KERNEL_CODENAME" == "0" ];
		then
			cd ${KERNEL}
			bot_complete_compile
			if [ "$KERNEL_STATE" == "0" ];
				then
					# Switch to root directory
					cd ..

					# Upload kernel file
					echo "Upload kernel..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument

					echo "Upload log..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			else
				# Switch to root
				cd ..

				# Upload kernel file
				echo "Upload kernel file..."
				curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			fi
	elif [ "$KERNEL_CODENAME" == "1" ];
		then
			cd ${KERNEL}
			if [ "$KERNEL_STATE" == "0" ];
				then
					# Upload kernel file
					echo "Upload kernel file..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/$ZIP_NAME" https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument

					echo "Upload log file..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			else
				# Upload kernel file
				echo "Upload kernel file..."
				curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/$ZIP_NAME" https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			fi
	fi
}

function run() {
if [ "$KERNEL_CODENAME" == "1" ];
	then
		lave_init
		env_init
		clang_init
		add_init
		if [ "$KERNEL_NEW_CAM" == "1" ];
			then
				# Tell if new cam patch need to executed
				NEW_PATCH_STATS="0"

				# Compile
				compile_lave
		elif [ "$KERNEL_NEW_CAM" == "0" ];
			then
				compile_lave
		fi
elif [ "$KERNEL_CODENAME" == "0" ];
	then
		mido_init
		env_init
		clang_init
		add_init
		compile_mido
fi
}

# Running
run
