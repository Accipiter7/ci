#!/bin/bash
#
# Kizuna Kernel Build Automated Trigger Script || For Continous Integration
#
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2020, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2020, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

function main() {
# Begin decision
echo "Which CI services that you want to use ?"
echo ""
echo "1. Circle-CI"
echo "2. Semaphore-CI"
echo "3. Drone-CI"
echo ""
echo "NOTE: Write number only!"
read -s decision

if [ "$decision" == "1" ];
	then
		bot="Circle-CI"
elif [ "$decision" == "2" ];
	then
		bot="Semaphore-CI"
elif [ "$decision" == "3" ];
	then
		bot="Drone-CI"
fi

echo ""
echo "Which devices that you want to compile ?"
echo ""
echo "1. Xiaomi Redmi Note 4x"
echo "2. Xiaomi Redmi Note 7"
echo ""
echo "NOTE: Write number only!"
read -s kdev

if [ "$kdev" == "1" ];
	then
		devices="Xiaomi Redmi Note 4x"
elif [ "$kdev" == "2" ];
	then
		devices="Xiaomi Redmi Note 7"
fi

echo ""
echo "Which kernel that you want to compile ?"
echo ""
echo "1. CAF Kernel"
echo "2. Kizuna Kernel"
echo "3. Fusion Kernel"
echo ""
echo "NOTE: Write number only!"
read -s kname

if [ "$kname" == "1" ];
	then
		name="CAF Kernel"
elif [ "$kname" == "2" ];
	then
		name="Kizuna Kernel"
elif [ "$kname" == "3" ];
	then
		name="Fusion Kernel"
fi

echo ""
echo "Which release type that you want to compile ?"
echo ""
echo "1. Stable"
echo "2. BETA"
echo ""
echo "NOTE: Write number only!"
read -s krelease

if [ "$krelease" == "1" ];
	then
		release="Stable"
elif [ "$krelease" == "2" ];
	then
		release="BETA"
fi

if [ "$kname" == "3" ];
	then
		echo ""
		echo "Which android version that you want to compile ?"
		echo ""
		echo "1. Pie"
		echo "2. Ten"
		echo "3. Pie - Ten"
		echo ""
		echo "NOTE: Write number only!"
		read -s kversion

		if [ "$kversion" == "1" ];
			then
				version="9.0"
		elif [ "$kversion" == "2" ];
			then
				version="10.0"
		elif [ "$kversion" == "3" ];
			then
				version="9.0 - 10.0"
		fi
else
	echo "Mido Kernel only for Android 10"
	version="10.0"
fi

echo ""
echo "Want to use external clang ? "
echo "External clang: proton clang 11 20200502"
echo ""
echo "1. yes"
echo "2. no"
echo ""
echo "NOTE: Write number only !"
read -s clang

if [ "$clang" == "1" ];
	then
		comp="1"
		ext_clang="Latest Proton"
elif [ "$clang" == "2" ];
	then
		comp="2"
		ext_clang="Docker Clang"
fi

# Show user option
echo ""
echo "========================================="
echo "| Your selection			|"
echo "|					|"
echo "| CI Services	: $bot		|"
echo "| Devices	: $devices	|"
echo "| Kernel	: $name		|"
echo "| Release	: $release			|"
echo "| Android Ver	: $version			|"
echo "| Ext Clang	: $ext_clang			|"
echo "|					|"
echo "| is this right option ?		|"
echo "|					|"
echo "| 1. Yes				|"
echo "| 2. No					|"
echo "|					|"
echo "| NOTE: Write number only!		|"
echo "========================================="
read -s user

# Configuring CI
if [ "$user" == "2" ];
	then
		echo "See ya"
		exit 1
elif [ "$user" == "1" ];
	then
		echo "Configuring CI Script"
		if [ "$decision" == "1" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=1/g'  ~/ci/ci
				sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=1/g'  ~/ci/ci
		elif [ "$decision" == "2" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=2/g'  ~/ci/ci
				sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=2/g'  ~/ci/ci
		elif [ "$decision" == "3" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=0/g'  ~/ci/ci
				sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=0/g'  ~/ci/ci
		fi
		if [ "$kname" == "1" ];
			then
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=0/g'  ~/ci/ci
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=0/g'  ~/ci/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/ci/ci
		elif [ "$kname" == "2" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=1/g'  ~/ci/ci
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=1/g'  ~/ci/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/ci/ci
		elif [ "$kname" == "3" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=2/g'  ~/ci/ci
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=2/g'  ~/ci/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/ci/ci
		fi
		if [ "$kdev" == "1" ];
			then
				sed -i -e 's/KERNEL_CODENAME=1/KERNEL_CODENAME=0/g'  ~/ci/ci
				sed -i -e 's/git clone --depth=1 -b fusion-eas-rama-test https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 ./#git clone --depth=1 -b new-eas-2 https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 ./g' ~/build_kernel/.circleci/build.sh
		elif [ "$kdev" == "2" ];
			then
				sed -i -e 's/KERNEL_CODENAME=0/KERNEL_CODENAME=1/g'  ~/ci/ci
				sed -i -e 's/#git clone --depth=1 -b fusion-eas-rama-test https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 ./git clone --depth=1 -b new-eas-2 https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 ./g' ~/build_kernel/.circleci/build.sh
				echo ""
				echo "Want to use custom cam ?"
				echo "1. yes"
				echo "2. no"
				echo "NOTE: Choose number only! "
				read -s cam
				if [ "$cam" == "1" ];
					then
						sed -i -e 's/KERNEL_NEW_CAM=0/KERNEL_NEW_CAM=1/g'  ~/ci/ci
				elif [ "$cam" == "2" ];
					then
						sed -i -e 's/KERNEL_NEW_CAM=1/KERNEL_NEW_CAM=0/g'  ~/ci/ci
				fi
		fi
		if [ "$kversion" == "1" ];
			then
				sed -i -e 's/KERNEL_AND_VER=2/KERNEL_AND_VER=0/g'  ~/ci/ci
				sed -i -e 's/KERNEL_AND_VER=1/KERNEL_AND_VER=0/g'  ~/ci/ci
		elif [ "$kversion" == "2" ];
			then
				sed -i -e 's/KERNEL_AND_VER=2/KERNEL_AND_VER=1/g'  ~/ci/ci
				sed -i -e 's/KERNEL_AND_VER=0/KERNEL_AND_VER=1/g'  ~/ci/ci
		elif [ "$kversion" == "3" ];
			then
				sed -i -e 's/KERNEL_AND_VER=1/KERNEL_AND_VER=2/g'  ~/ci/ci
				sed -i -e 's/KERNEL_AND_VER=0/KERNEL_AND_VER=2/g'  ~/ci/ci
		fi
		if [ "$krelease" == "1" ];
			then
				sed -i -e 's/KERNEL_STATE=0/KERNEL_STATE=1/g'  ~/ci/ci
		elif [ "$krelease" == "2" ];
			then
				sed -i -e 's/KERNEL_STATE=1/KERNEL_STATE=0/g'  ~/ci/ci
		fi
		if [ "$comp" == "1" ];
			then
				sed -i -e 's/KERNEL_COMPILER=0/KERNEL_COMPILER=1/g'  ~/ci/ci
		elif [ "$comp" == "2" ];
			then
				sed -i -e 's/KERNEL_COMPILER=1/KERNEL_COMPILER=0/g'  ~/ci/ci
		fi

		echo "Triggering CI"

		# Trigger script earlier
		trigger_script

		if [ "$decision" == "1" ];
			then
				echo "Push to Circle-CI"
				cd ~/build_kernel
		elif [ "$decision" == "2" ];
			then
				echo "Push to Semaphore-CI"
				cd ~/Semaphore-CI
		elif [ "$decision" == "3" ];
			then
				echo "Push to Drone-CI"
				cd ~/Drone-CI
		fi

		# Trigger CI
		trigger_ci
fi
}

function trigger_script() {
git add .
git commit -m "ci: trigger: Automated Trigger CI" -s
git push origin CI
}

function trigger_ci() {
git commit --allow-empty -am "ci: trigger: Automated Trigger CI" -s
git push -f
}

# run main
main
